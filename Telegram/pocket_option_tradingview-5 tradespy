import configparser
from curses.ascii import ESC
from logging import exception
from select import select
from wsgiref.simple_server import WSGIRequestHandler
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support.ui import Select
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.action_chains import ActionChains    
from selenium.webdriver.common.keys import Keys

import time, random
from configparser import ConfigParser
from telethon import TelegramClient
from telethon import events
import os, re, platform
import time
import asyncio
import configparser
import datetime


if platform.system() == 'Windows':
    os.chdir('C:\\Python\\Telegram')
elif platform.system() == 'Linux':
    os.chdir('/github/Python/Telegram')

def clicker(element_locator):
    try:
        click=driver.find_element(By.XPATH, element_locator)
        click.click()
    
    except Exception as e:
        print(e)

def enter(param,xpath):
    credential=driver.find_element(By.XPATH, xpath)
    #credential.clear()
    credential.send_keys(param)

def change_to_fixed_expiration():
        check_timer = WebDriverWait(driver,60).until(EC.presence_of_element_located((By.XPATH, '//*[@id="put-call-buttons-chart-1"]/div/div[1]/div[1]/div[1]')))
        if 'utc' in check_timer.text.lower():
            #change to fixed duration
            clicker('//*[@id="put-call-buttons-chart-1"]/div/div[1]/div[1]/div[2]/div[2]/div/a')
            print('Changed to Fixed Duration')

def reset_timer():
    try:
        clicker('//*[@class="value__val"]')
        time.sleep(1)
        WebDriverWait(driver,10).until(EC.element_to_be_clickable((By.XPATH, '//div[text()="M1"]'))).click()

    except Exception as e:
        print ('error in reset function', e)

def set_minute_timer(time):
    time = int(time)
    try:
        clicker ('//*[@id="put-call-buttons-chart-1"]/div/div[1]/div[1]/div[2]/div[1]/div')
#        WebDriverWait(driver, 1).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="modal-root"]/div[2]/div/div/div[1]/div[2]/div/input'))).click()
#        ActionChains(driver).send_keys(Keys.BACKSPACE).send_keys(Keys.BACKSPACE).send_keys(time).perform()
#        WebDriverWait(driver, 1).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="modal-root"]/div[2]/div/div/div[1]/div[3]/div/input'))).click()
#        ActionChains(driver).send_keys(Keys.BACKSPACE).send_keys(Keys.BACKSPACE).send_keys(0).perform()   
        for i in range (time-1):
            clicker('//*[@id="modal-root"]/div[2]/div/div/div[1]/div[2]/a[1]')
        clicker('//*[@id="chart-1"]/canvas')    
        
    except Exception as e:
        print ('error in set minute timer', e)

def set_trade_amount_percent():
    amount = trading_balance()*trading_percent/100
    amount = f'{amount:04}'
    try:
        print (amount)
        WebDriverWait(driver, 1).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="put-call-buttons-chart-1"]/div/div[1]/div[2]/div[2]/div[1]/div/input'))).click()
        ActionChains(driver).send_keys(Keys.BACKSPACE).send_keys(Keys.BACKSPACE).send_keys(Keys.BACKSPACE).send_keys(Keys.BACKSPACE).perform()
        ActionChains(driver).send_keys(amount[0]).send_keys(amount[1]).send_keys(amount[2]).send_keys(amount[3]).perform()   
        clicker('//*[@id="chart-1"]/canvas')    
        
    except Exception as e:
        print ('error in set trade amount', e)

def compare_payouts(currency_list):
    global payout_path
    try:
        payout_list = []
#        payout_value_path = '//*[@id="put-call-buttons-chart-1"]/div/div[2]/div[1]/div[1]/div[2]/div/div[1]/span'
        for i in currency_list:
            prepare(i)
            payout_list.append(float(driver.find_element(By.XPATH, payout_path).text[1:-1]))
            time.sleep(1)
        choice = currency_list[(payout_list.index(max(payout_list)))]
        print (choice)
        return choice

    except Exception as e:
        print ('There is an issue with the compare payout function', e)

def check_payout():
    global payout_path, payout_threshold, ignore
    try:
        payout = driver.find_element(By.XPATH, payout_path)
        print(currency,':',payout.text[1:-1])
        if int(payout.text[1:-1]) < payout_threshold:
            #print ('Payout too low!!!')
            ignore = True
        else:
            ignore = False

    except Exception as e:
        print ('There is an issue with the check payout function', e)
    print ('Ignore: ',ignore)

def prepare(instrument):
    global ignore, trade_amount
    if ignore == False:
        try:
            #Select Instrument To Trade
            clicker('//*[@id="bar-chart"]/div/div/div[1]/div/div[1]/div[1]/div[1]/div/a/div/span')
            clicker('//*[@id="modal-root"]/div[2]/div/div/div[1]/div/div[1]/a[1]/span[2]')
            enter(instrument,'//*[@id="modal-root"]/div[2]/div/div/div[2]/div[1]/div[1]/input')
            try:
                WebDriverWait(driver, 2).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="modal-root"]/div[2]/div/div/div[2]/div[2]/div/div/div[1]/ul/li/a/span[3]'))).click()
            except:
                ignore = True
                print ('Ignoring due to instrument unavailability')
            ActionChains(driver).send_keys(Keys.ESCAPE).perform()
<<<<<<< HEAD
            reset_timer()
            set_trade_amount_percent()
=======
>>>>>>> e108b35e56ece7c9c98cdbfbb8852625d09dc5d4
            check_payout()
        except Exception as e:
            print ('There is an issue with the prepare function', e)
    

def pocket_option_trader(action, duration):
    try:
        #Set Expiration
        set_minute_timer(duration)
        if action.lower() == 'buy':
            print ('Its a CALL!!!!!!!')
            a = ActionChains(driver)
            a.key_down(Keys.SHIFT).send_keys('W').perform()
        elif action.lower() == 'sell':
            print ('Its a PUT!!!!!!!')
            a = ActionChains(driver)
            a.key_down(Keys.SHIFT).send_keys('S').perform()
        return
        
    except Exception as e:
        print ('error in pocket_option_trader', e)


def trading_balance():
    #current = WebDriverWait(driver, 30).until(EC.presence_of_element_located((By.XPATH, '/html/body/div[4]/div[1]/header/div[2]/div[2]/div/a/span')))
    current = WebDriverWait(driver, 30).until(EC.presence_of_element_located((By.CLASS_NAME, 'balance_current')))
    return float(current.text[1:])


def random_break():
    time_choices = [3600,7200,1800]
    choice = random.choices(time_choices)
    print ('Break:', choice[0])
    print('Trading session completed, taking a break')
    time.sleep(choice[0])

def market_check():
    global otc, ignore
    if ignore == False:
        try:    
            market = driver.find_element(By.XPATH,'//*[@id="bar-chart"]/div/div/div[1]/div/div[1]/div[1]/div[1]/div/a/div/span')
        #    print (market.text)
            if 'otc' in market.text.lower():
                ignore = True
                print('Market Mismatch!!!')
            else:
                ignore = False    
        except Exception as e:
            print ('error in pocket_option_trader', e)

        

chrome_options = Options()
chrome_options.add_argument("--disable-extensions")
chrome_options.add_argument("--disable-gpu")
#chrome_options.add_argument("--no-sandbox") # linux only
#chrome_options.add_argument("--headless")
chrome_options = webdriver.ChromeOptions() 
chrome_options.add_argument("start-maximized")
chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
chrome_options.add_experimental_option('useAutomationExtension', False)


pocket_options='https://pocketoption.com/en/login'

if platform.system() == 'Windows':
    chrome_path = 'C:\\Python\\chromedriver.exe'
elif platform.system() == 'Linux':
    chrome_path = '/github/Python/chromedriver'

driver=webdriver.Chrome(executable_path=chrome_path,options=chrome_options)
driver.implicitly_wait(30)
driver.get(pocket_options)
driver.maximize_window()

#enter('cciephantom@gmail.com','/html/body/div[2]/div[2]/div/div/div/div[3]/form/div[2]/div[1]/input')
#enter('Ideraoluwa@01','/html/body/div[2]/div[2]/div/div/div/div[3]/form/div[2]/div[2]/input')
#enter('tejiri.fai1@gmail.com','/html/body/div[2]/div[2]/div/div/div/div[3]/form/div[2]/div[1]/input')
#enter('H27VGUJQ','/html/body/div[2]/div[2]/div/div/div/div[3]/form/div[2]/div[2]/input')
enter('oghenetejiri_orukpe@yahoo.com','/html/body/div[2]/div[2]/div/div/div/div[3]/form/div[2]/div[1]/input')
enter('rsBUlxEr','/html/body/div[2]/div[2]/div/div/div/div[3]/form/div[2]/div[2]/input')


WebDriverWait(driver, 10).until(EC.frame_to_be_available_and_switch_to_it((By.CSS_SELECTOR,"iframe[name^='a-'][src^='https://www.google.com/recaptcha/api2/anchor?']")))
WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, "//span[@id='recaptcha-anchor']"))).click()

print('Captcha Button Done!!!')
time.sleep(10)
print('Time to Login ....')

time.sleep(5)

#print('Resetting Timer...')
#reset_timer()

print('Logging Into Telegram to Get Signals...')

config = configparser.ConfigParser()
config.read("config.ini")

# Setting configuration values
api_id = config['Telegram']['api_id']
api_hash = config['Telegram']['api_hash']

api_hash = str(api_hash)

phone = config['Telegram']['phone']
username = config['Telegram']['username']

currency = ''
trade_count = 0
session_trade_count = 20
loss_count = 0
demo_mode_path = '/html/body/div[4]/div[1]/header/div[2]/div[2]/div/div'
payout_path = '//*[@id="put-call-buttons-chart-1"]/div/div[2]/div[1]/div[1]/div[2]/div/div[1]/span'
payout_threshold = 69
initial_balance = trading_balance()
session_balance = 0
session_initial_balance = 0
trading_percent = 1
target = 10
safe = 0
otc = False
ignore = False
print ('Initial Balance:',initial_balance,'\r', 'Target Balance:', ((target*initial_balance)/100)+initial_balance)
balance = trading_balance()
print (balance)
trade_amount = int(balance*trading_percent/100)
print(trade_amount)
set_trade_amount_percent()
change_to_fixed_expiration()
#reset_timer()

client = TelegramClient('tradingview_robot', api_id, api_hash)


try:
    @client.on(events.NewMessage())
    async def my_event_handler(event):
        global currency, trade_count, loss_count, initial_balance, session_balance, session_initial_balance, session_trade_count, safe, ignore
        currency_list =[]
        if trading_balance() >= ((target*initial_balance)/100)+initial_balance:
            print('Target Achieved, Logging off...')
            await client.disconnect()
        with open('results_new.csv', 'a') as f, open('results_real.csv', 'a') as r:
            if ('1676626725' in str(event.peer_id)) or ('1366707521' in str(event.peer_id)):
                current_balance = trading_balance()
                if current_balance >= ((target*initial_balance)/100)+initial_balance:
                    print ('Daily Target reached:', ((target*initial_balance)/100)+initial_balance )
                    client.disconnect()
                event_text = event.text.strip().lower()
                print(event_text)
                event_list = event_text.split('\n')
                print(event_list)
                if len(event_list) > 1:
                    for n in event_list:
                        currency = n.split(',')[0]
                        print (currency)
                        currency_list.append(currency)
    #                    prepare(currency)
                    print(currency_list)
                    best_currency = compare_payouts(currency_list)
                    print("Taking the", best_currency, 'trade...')
                    best_pair = event_list[currency_list.index(best_currency)]
                    print (best_pair)
                    currency = best_currency
                else:   
                    best_pair = event_list[0]
                    currency = best_pair.split(',')[0]
                prepare(currency)
#                time.sleep(1)
                market_check()
                if ignore == False:
                    reset_timer()
                    set_trade_amount_percent()
                    action = best_pair.split(',')[1]
                    duration = best_pair.split(',')[2]
                    pocket_option_trader(action,duration)
                    print(currency,action,duration)
                    trade_count += 1
                    print('Trade Count:', trade_count) 
                ignore = False    
                if int(trade_count) >= int(session_trade_count):
                    session_balance = trading_balance()
                    print('Profit:', (session_balance - initial_balance))
                    random_break()
                    session_initial_balance = 0
                    trade_count = 0
                    print('Session Starting...')

    client.start()
    client.run_until_disconnected()
except Exception as e:
    print (e)    